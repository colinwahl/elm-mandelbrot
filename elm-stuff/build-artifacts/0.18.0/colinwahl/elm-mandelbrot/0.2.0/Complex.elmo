var _colinwahl$elm_mandelbrot$Complex$mult = F2(
	function (c1, c2) {
		return {re: (c1.re * c2.re) - (c1.im * c2.im), im: (c1.re * c2.im) + (c2.re * c1.im)};
	});
var _colinwahl$elm_mandelbrot$Complex$abs = function (c) {
	return Math.pow(
		Math.pow(c.re, 2) + Math.pow(c.im, 2),
		0.5);
};
var _colinwahl$elm_mandelbrot$Complex$atan2 = F2(
	function (y, x) {
		return (_elm_lang$core$Native_Utils.cmp(x, 0) > 0) ? _elm_lang$core$Basics$atan(y / x) : ((_elm_lang$core$Native_Utils.eq(x, 0) && (_elm_lang$core$Native_Utils.cmp(y, 0) > 0)) ? (_elm_lang$core$Basics$pi / 2) : (((_elm_lang$core$Native_Utils.cmp(x, 0) < 0) && (_elm_lang$core$Native_Utils.cmp(y, 0) > 0)) ? (_elm_lang$core$Basics$pi + _elm_lang$core$Basics$atan(y / x)) : (((_elm_lang$core$Native_Utils.cmp(x, 0) < 1) && (_elm_lang$core$Native_Utils.cmp(y, 0) < 0)) ? (0 - A2(_colinwahl$elm_mandelbrot$Complex$atan2, 0 - y, x)) : ((_elm_lang$core$Native_Utils.eq(y, 0) && (_elm_lang$core$Native_Utils.cmp(x, 0) < 0)) ? _elm_lang$core$Basics$pi : ((_elm_lang$core$Native_Utils.eq(x, 0) && _elm_lang$core$Native_Utils.eq(y, 0)) ? y : (x + y))))));
	});
var _colinwahl$elm_mandelbrot$Complex$arg = function (c) {
	var _p0 = {ctor: '_Tuple2', _0: c.re, _1: c.im};
	if ((_p0._0 === 0) && (_p0._1 === 0)) {
		return 0;
	} else {
		return A2(_colinwahl$elm_mandelbrot$Complex$atan2, _p0._1, _p0._0);
	}
};
var _colinwahl$elm_mandelbrot$Complex$nln = F2(
	function (z, k) {
		return {
			re: A2(
				_elm_lang$core$Basics$logBase,
				_elm_lang$core$Basics$e,
				_colinwahl$elm_mandelbrot$Complex$abs(z)),
			im: _colinwahl$elm_mandelbrot$Complex$arg(z) + ((2 * _elm_lang$core$Basics$pi) * _elm_lang$core$Basics$toFloat(k))
		};
	});
var _colinwahl$elm_mandelbrot$Complex$ln = A2(_elm_lang$core$Basics$flip, _colinwahl$elm_mandelbrot$Complex$nln, 0);
var _colinwahl$elm_mandelbrot$Complex$add = F2(
	function (c1, c2) {
		return {re: c1.re + c2.re, im: c1.im + c2.im};
	});
var _colinwahl$elm_mandelbrot$Complex$im = function (c) {
	return c.im;
};
var _colinwahl$elm_mandelbrot$Complex$re = function (c) {
	return c.re;
};
var _colinwahl$elm_mandelbrot$Complex$complex = F2(
	function (a, b) {
		return {re: a, im: b};
	});
var _colinwahl$elm_mandelbrot$Complex$exp = function (c) {
	return A2(
		_colinwahl$elm_mandelbrot$Complex$mult,
		A2(
			_colinwahl$elm_mandelbrot$Complex$complex,
			Math.pow(
				_elm_lang$core$Basics$e,
				_colinwahl$elm_mandelbrot$Complex$re(c)),
			0),
		A2(
			_colinwahl$elm_mandelbrot$Complex$complex,
			_elm_lang$core$Basics$cos(
				_colinwahl$elm_mandelbrot$Complex$im(c)),
			_elm_lang$core$Basics$sin(
				_colinwahl$elm_mandelbrot$Complex$im(c))));
};
var _colinwahl$elm_mandelbrot$Complex$repeat = F3(
	function (n, z, c) {
		repeat:
		while (true) {
			var _p1 = n;
			if (_p1 === 0) {
				return z;
			} else {
				var _v2 = _p1 - 1,
					_v3 = A2(
					_colinwahl$elm_mandelbrot$Complex$add,
					A2(_colinwahl$elm_mandelbrot$Complex$mult, z, z),
					c),
					_v4 = c;
				n = _v2;
				z = _v3;
				c = _v4;
				continue repeat;
			}
		}
	});
var _colinwahl$elm_mandelbrot$Complex$Complex = F2(
	function (a, b) {
		return {re: a, im: b};
	});
var _colinwahl$elm_mandelbrot$Complex$i = A2(_colinwahl$elm_mandelbrot$Complex$Complex, 0, 1);
var _colinwahl$elm_mandelbrot$Complex$zero = A2(_colinwahl$elm_mandelbrot$Complex$Complex, 0, 0);
var _colinwahl$elm_mandelbrot$Complex$pow = F2(
	function (z, w) {
		return _elm_lang$core$Native_Utils.eq(z, _colinwahl$elm_mandelbrot$Complex$zero) ? _colinwahl$elm_mandelbrot$Complex$zero : _colinwahl$elm_mandelbrot$Complex$exp(
			A2(
				_colinwahl$elm_mandelbrot$Complex$mult,
				w,
				_colinwahl$elm_mandelbrot$Complex$ln(z)));
	});
